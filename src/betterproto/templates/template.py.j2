# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: {{ ', '.join(output_file.input_filenames) }}
# plugin: python-betterproto
# This file has been @generated
{% for i in output_file.python_module_imports|sort %}
import {{ i }}
{% endfor %}
from dataclasses import dataclass
{% if output_file.datetime_imports %}
from datetime import {% for i in output_file.datetime_imports|sort %}{{ i }}{% if not loop.last %}, {% endif %}{% endfor %}

{% endif%}
{% if output_file.typing_imports %}
from typing import {% for i in output_file.typing_imports|sort %}{{ i }}{% if not loop.last %}, {% endif %}{% endfor %}

{% endif %}

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
{% for i in output_file.imports|sort %}
{{ i }}
{% endfor %}
{% if output_file.services%}
import grpc
from betterproto.grpc.grpcio_server import ServicerBase
{% endif %}

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import grpc
{% for i in output_file.imports_type_checking_only|sort %}    {{ i }}
{% endfor %}

{% if output_file.enums %}{% for enum in output_file.enums %}
class {{ enum.py_name }}(betterproto.Enum):
    {% if enum.comment %}
{{ enum.comment }}

    {% endif %}
    {% for entry in enum.entries %}
    {{ entry.name }} = {{ entry.value }}
        {% if entry.comment %}
{{ entry.comment }}

        {% endif %}
    {% endfor %}


{% endfor %}
{% endif %}
{% for message in output_file.messages %}
@dataclass(eq=False, repr=False)
class {{ message.py_name }}(betterproto.Message):
    {% if message.comment %}
{{ message.comment }}

    {% endif %}
    {% for field in message.fields %}
    {{ field.get_field_string() }}
        {% if field.comment %}
{{ field.comment }}

        {% endif %}
    {% endfor %}
    {% if not message.fields %}
    pass
    {% endif %}

    {% if message.deprecated or message.has_deprecated_fields %}
    def __post_init__(self) -> None:
        {% if message.deprecated %}
        warnings.warn("{{ message.py_name }} is deprecated", DeprecationWarning)
        {% endif %}
        super().__post_init__()
        {% for field in message.deprecated_fields %}
        if self.is_set("{{ field }}"):
            warnings.warn("{{ message.py_name }}.{{ field }} is deprecated", DeprecationWarning)
        {% endfor %}
    {%  endif %}


{% endfor %}

{% for service in output_file.services %}
class {{ service.py_name }}Stub:
    {% if service.comment %}
{{ service.comment }}

    {% endif %}

    def __init__(self, channel: "grpc.Channel"):
        {% if not service.methods %}
        pass
        {% endif %}
        {% for method in service.methods %}
            {% if method.server_streaming and method.client_streaming %}
            self.__rpc_{{ method.py_name }} = channel.stream_stream(
            {% elif method.server_streaming and not method.client_streaming %}
            self.__rpc_{{ method.py_name }} = channel.unary_stream(
            {% elif not method.server_streaming and method.client_streaming %}
            self.__rpc_{{ method.py_name }} = channel.stream_unary(
            {% else %}
            self.__rpc_{{ method.py_name }} = channel.unary_unary(
            {% endif %}
                "{{ method.route }}",
                request_serializer={{ method.py_input_message_type }}.SerializeToString,
                response_deserializer={{ method.py_output_message_type }}.FromString,
            )
        {% endfor %}

    {% for method in service.methods %}
    def {{ method.py_name }}(self
        {%- if not method.client_streaming -%}
            {%- if method.py_input_message and method.py_input_message.fields -%}, *,
                {%- for field in method.py_input_message.fields -%}
                    {{ field.py_name }}: {% if field.py_name in method.mutable_default_args and not field.annotation.startswith("Optional[") -%}
                                            Optional[{{ field.annotation }}]
                                         {%- else -%}
                                            {{ field.annotation }}
                                         {%- endif -%} =
                                            {%- if field.py_name not in method.mutable_default_args -%}
                                                {{ field.default_value_string }}
                                            {%- else -%}
                                                None
                                            {% endif -%}
                    {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            {%- endif -%}
        {%- else -%}
            {# Client streaming: need a request iterator instead #}
            , request_iterator: Union[AsyncIterable["{{ method.py_input_message_type }}"], Iterable["{{ method.py_input_message_type }}"]]
        {%- endif -%}
            ) -> {% if method.server_streaming %}Iterator["{{ method.py_output_message_type }}"]{% else %}"{{ method.py_output_message_type }}"{% endif %}:
        {% if method.comment %}
{{ method.comment }}

        {% endif %}
        {%- for py_name, zero in method.mutable_default_args.items() %}
        {{ py_name }} = {{ py_name }} or {{ zero }}
        {% endfor %}

        {% if not method.client_streaming %}
        request = {{ method.py_input_message_type }}()
        {% for field in method.py_input_message.fields %}
            {% if field.field_type == 'message' %}
        if {{ field.py_name }} is not None:
            request.{{ field.py_name }} = {{ field.py_name }}
            {% else %}
        request.{{ field.py_name }} = {{ field.py_name }}
            {% endif %}
        {% endfor %}
        {% endif %}

        {% if method.server_streaming %}
        for response in self.__rpc_{{ method.py_name }}(
            {% if method.client_streaming %}
            request_iterator
            {% else %}
            request
            {% endif %}
        ):
            yield response
        {% else %}
        return self.__rpc_{{ method.py_name }}(
            {% if method.client_streaming %}
            request_iterator
            {% else %}
            request
            {% endif %}
        )
        {% endif %}
    {% endfor %}
{% endfor %}

{% for service in output_file.services %}
class {{ service.py_name }}Base(ServicerBase):
    {% if service.comment %}
{{ service.comment }}

    {% endif %}

    {% for method in service.methods %}
    def {{ method.py_name }}(self
        {%- if not method.client_streaming -%}
            {%- if method.py_input_message and method.py_input_message.fields -%},
                {%- for field in method.py_input_message.fields -%}
                    {{ field.py_name }}: {% if field.py_name in method.mutable_default_args and not field.annotation.startswith("Optional[") -%}
                                            Optional[{{ field.annotation }}]
                                         {%- else -%}
                                            {{ field.annotation }}
                                         {%- endif -%}
                    {%- if not loop.last %}, {% endif -%}
                {%- endfor -%}
            {%- endif -%}
        {%- else -%}
            {# Client streaming: need a request iterator instead #}
            , request_iterator: Iterator["{{ method.py_input_message_type }}"]
        {%- endif -%}
            , context: "grpc.ServicerContext"
            ) -> {% if method.server_streaming %}Iterator["{{ method.py_output_message_type }}"]{% else %}"{{ method.py_output_message_type }}"{% endif %}:
        {% if method.comment %}
{{ method.comment }}

        {% endif %}
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    {% endfor %}

    __proto_path__ = "{{ service.proto_path }}"

    @property
    def __rpc_methods__(self):
        return {
        {% for method in service.methods %}
            "{{ method.proto_name }}":
            {% if not method.client_streaming and not method.server_streaming %}
                grpc.unary_unary_rpc_method_handler(
            {% elif method.client_streaming and method.server_streaming %}
                grpc.stream_stream_rpc_method_handler(
            {% elif method.client_streaming %}
                grpc.stream_unary_rpc_method_handler(
            {% else %}
                grpc.unary_stream_rpc_method_handler(
            {% endif %}
                    self.{{ method.py_name }},
                    request_deserializer={{ method.py_input_message_type }}.FromString,
                    response_serializer={{ method.py_input_message_type }}.SerializeToString,
                ),
        {% endfor %}
        }

{% endfor %}